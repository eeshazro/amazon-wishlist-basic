-- Migration: Add Full Collaboration Features
-- This migration transforms the basic wishlist system to support full collaboration
-- Run this after the basic system is working to add comments, advanced roles, and access types

-- 1. Add access_type column to wishlist_invite table
ALTER TABLE wishlist_invite 
ADD COLUMN access_type VARCHAR(20) NOT NULL DEFAULT 'view_only'
    CHECK (access_type IN ('view_only', 'edit'));

-- 2. Update wishlist_access table to support advanced roles
-- Note: Owners are not stored in access table as they have inherent access via wishlist.owner_id
ALTER TABLE wishlist_access 
DROP CONSTRAINT IF EXISTS wishlist_access_role_check;

ALTER TABLE wishlist_access 
ADD CONSTRAINT wishlist_access_role_check 
    CHECK (role IN ('edit', 'view_only'));

-- 3. Create wishlist_comment table for item discussions
CREATE TABLE IF NOT EXISTS wishlist_comment (
    id SERIAL PRIMARY KEY,
    wishlist_item_id INTEGER NOT NULL REFERENCES wishlist_item(id) ON DELETE CASCADE,
    user_id INTEGER NOT NULL, -- References external user service
    content TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 4. Add indexes for performance
CREATE INDEX IF NOT EXISTS idx_wishlist_comment_item ON wishlist_comment(wishlist_item_id);
CREATE INDEX IF NOT EXISTS idx_wishlist_comment_user ON wishlist_comment(user_id);
CREATE INDEX IF NOT EXISTS idx_wishlist_comment_created ON wishlist_comment(created_at);

-- 5. Comments will be displayed in order of creation without count tracking

-- 6. Add helpful comments to tables
COMMENT ON TABLE wishlist_comment IS 'Comments on wishlist items for collaborative discussions';
COMMENT ON COLUMN wishlist_invite.access_type IS 'Type of access being granted: view_only or edit';
COMMENT ON COLUMN wishlist_access.role IS 'User role: edit (can edit items and comment), view_only (read-only). Owners have inherent access via wishlist.owner_id';

-- 7. Create view for wishlist items (useful for API responses)
CREATE OR REPLACE VIEW wishlist_item_with_comments AS
SELECT 
    wi.*,
    w.name as wishlist_name,
    w.owner_id as wishlist_owner_id
FROM wishlist_item wi
JOIN wishlist w ON wi.wishlist_id = w.id;

-- 8. Grant permissions (if using specific database users)
-- GRANT SELECT, INSERT, UPDATE, DELETE ON wishlist_comment TO wishlist_user;
-- GRANT USAGE, SELECT ON SEQUENCE wishlist_comment_id_seq TO wishlist_user;
-- GRANT SELECT ON wishlist_item_with_comments TO wishlist_user;

-- Migration complete!
-- The database now supports:
-- - Comments on wishlist items (displayed in creation order)
-- - Advanced roles (edit, view_only) - owners have inherent access via wishlist.owner_id
-- - Access types in invitations (view_only, edit)
